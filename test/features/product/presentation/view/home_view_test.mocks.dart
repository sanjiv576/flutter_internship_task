// Mocks generated by Mockito 5.4.4 from annotations
// in online_store/test/features/product/presentation/view/home_view_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:online_store/core/failure/failure.dart' as _i6;
import 'package:online_store/features/product/domain/entity/product_entity.dart'
    as _i7;
import 'package:online_store/features/product/domain/repository/product_repository.dart'
    as _i2;
import 'package:online_store/features/product/domain/use_case/product_use_case.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIProductRepository_0 extends _i1.SmartFake
    implements _i2.IProductRepository {
  _FakeIProductRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ProductUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductUseCase extends _i1.Mock implements _i4.ProductUseCase {
  @override
  _i2.IProductRepository get iProductRepository => (super.noSuchMethod(
        Invocation.getter(#iProductRepository),
        returnValue: _FakeIProductRepository_0(
          this,
          Invocation.getter(#iProductRepository),
        ),
        returnValueForMissingStub: _FakeIProductRepository_0(
          this,
          Invocation.getter(#iProductRepository),
        ),
      ) as _i2.IProductRepository);

  @override
  set iProductRepository(_i2.IProductRepository? _iProductRepository) =>
      super.noSuchMethod(
        Invocation.setter(
          #iProductRepository,
          _iProductRepository,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<
      _i3.Either<_i6.Failure,
          List<_i7.ProductEntity>>> getAllProducts() => (super.noSuchMethod(
        Invocation.method(
          #getAllProducts,
          [],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.ProductEntity>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.ProductEntity>>(
          this,
          Invocation.method(
            #getAllProducts,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.ProductEntity>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.ProductEntity>>(
          this,
          Invocation.method(
            #getAllProducts,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.ProductEntity>>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<String>>> getAllCategories() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllCategories,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, List<String>>>.value(
            _FakeEither_1<_i6.Failure, List<String>>(
          this,
          Invocation.method(
            #getAllCategories,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, List<String>>>.value(
                _FakeEither_1<_i6.Failure, List<String>>(
          this,
          Invocation.method(
            #getAllCategories,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<String>>>);
}
